const KNIGHT_MOVES: [u64; 64] = generate_knight_moves();
const KING_MOVES: [u64; 64] = generate_king_moves();

#[rustfmt::skip]
const ROOK_MAGICS: [u64; 64] = [
    0x8080001080204000, 0x2040400010006000, 0x4802880d0002000, 0x800c0800825000,
    0x2001020881c2200, 0x1200100200110804, 0x4100058200441100, 0x200002944008209,
    0x104800020400082, 0x208400050022000, 0x6001082002240, 0x411005000200900,
    0x10804c00800800, 0x60800200840080, 0xd010004010200, 0x6001000880410002,
    0x480104002402000, 0x80c0808040002000, 0x4209010040122000, 0x30010008142100,
    0x4000050008010010, 0xa230808002000400, 0x41040028108b0a, 0x2400a000c810964,
    0x81708080084000, 0x1250004440002000, 0x50100080200880, 0x84100210030008a,
    0x4510100040800, 0x1000040080020080, 0x2000200280184, 0x8000102000180c4,
    0x6080002000400240, 0x2010082002050, 0x10100080802000, 0x300084800800,
    0x448000c09001100, 0xc2801a0080800400, 0x8400800200800300, 0x2000806a000403,
    0x9200344004808000, 0x6410004620104002, 0x42008040120028, 0x8800090090010020,
    0x4000110008010004, 0x812c000402008080, 0x20a2810040045, 0x6005008052002c,
    0x208208000410300, 0x900862008400080, 0x42000811000e180, 0x40500180180080,
    0x2040080080080, 0x1004400280300, 0x200084290010400, 0x10410408200,
    0x810455021018001, 0x602460020850052, 0x1800090020001043, 0x5100100202409,
    0x8086000820841016, 0x2000405181082, 0x83002084020005, 0x828002844010082,
];

#[rustfmt::skip]
const BISHOP_MAGICS: [u64; 64] = [
    0x402200408808101, 0x884010424088024, 0xc390206002e11, 0x4040080000800,
    0x806021000a00320, 0x80104a044216800, 0xc060861010041000, 0x1081240202101e08,
    0x80400812088a00, 0x2000101123210200, 0x44480e14042000, 0x190c09002a03,
    0x580141421c08000, 0xc080020804045020, 0x8600104904202000, 0x200004404440240,
    0x20000860050204, 0x88002081011220, 0x100502100e101, 0x1600800802094001,
    0x18100101400804, 0x6100402208064001, 0x5402a08402880802, 0x80600008245180a,
    0x4840081c045800, 0x81024c810040099, 0x824018080500, 0x8040044004010020,
    0x203001085014000, 0x8008808011082000, 0x2008004044100, 0x2400420101018224,
    0x4810080500200402, 0x868841002200a05, 0x214021501280441, 0x460080080280,
    0x8220008400418202, 0x8408090101423000, 0x90010a40801a1800, 0x84948003040a,
    0x804104a03a400, 0x502080308401420, 0x401206028001001, 0x2000012018000100,
    0x820880501408403, 0x2010021005004048, 0x800c282085000400, 0x480c810401000025,
    0x4041421014e00005, 0x842010c024e8600, 0x2220201040400, 0x40006d0084040000,
    0x8c00145102120000, 0x1444002042d0010, 0x804044040422d400, 0x2085101020009,
    0x2800140402184428, 0x18dc02a08042480, 0x106010021080800, 0x12c0000811084802,
    0x2020a0010602202, 0x1200204002040448, 0x2000102006040042, 0x31012100c028011,
];

#[derive(Default)]
struct MagicInfo {
    magic: u64,
    shift: u8,
    mask: u64,
    attacks: Vec<u64>,
}

const fn generate_knight_moves() -> [u64; 64] {
    let mut out = [0; 64];

    let directions = [
        (2, 1),
        (2, -1),
        (-2, 1),
        (-2, -1),
        (1, 2),
        (1, -2),
        (-1, 2),
        (-1, -2),
    ];

    let mut rank = 0;
    while rank < 8 {
        let mut file = 0;
        while file < 8 {
            let mut dir_index = 0;
            let mut attacks: u64 = 0;
            while dir_index < directions.len() {
                let (dr, df) = directions[dir_index];
                let new_rank = rank + dr;
                let new_file = file + df;

                if new_rank >= 0 && new_rank < 8 && new_file >= 0 && new_file < 8 {
                    let new_square_index = new_rank * 8 + new_file;
                    attacks |= 1 << new_square_index;
                }

                dir_index += 1;
            }
            out[(rank * 8 + file) as usize] = attacks;
            file += 1;
        }
        rank += 1;
    }

    out
}

const fn generate_king_moves() -> [u64; 64] {
    let mut out = [0; 64];

    let directions = [
        (1, 0),
        (1, 1),
        (0, 1),
        (-1, 1),
        (-1, 0),
        (-1, -1),
        (0, -1),
        (1, -1),
    ];

    let mut rank = 0;
    while rank < 8 {
        let mut file = 0;
        while file < 8 {
            let mut dir_index = 0;
            let mut attacks: u64 = 0;
            while dir_index < directions.len() {
                let (dr, df) = directions[dir_index];
                let new_rank = rank + dr;
                let new_file = file + df;

                if new_rank >= 0 && new_rank < 8 && new_file >= 0 && new_file < 8 {
                    let new_square_index = new_rank * 8 + new_file;
                    attacks |= 1 << new_square_index;
                }

                dir_index += 1;
            }
            out[(rank * 8 + file) as usize] = attacks;
            file += 1;
        }
        rank += 1;
    }

    out
}
